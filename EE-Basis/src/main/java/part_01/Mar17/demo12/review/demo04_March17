1.Map<k,v>集合 ---> HashMap集合 ---> LinkedHashMap集合

    1.Map集合是一个双列集合,一个元素包含两个值(一个key,一个value)
    2.Map集合中的元素,key和value的数据类型可以相同,也可以不同
    3.Map集合中的元素,key是不允许重复的,value是可以重复的
    4.Map集合中的元素,key和value是一一对应

    HashMap<k,v>集合继承自Map<k,v>接口
        集合的特点:
            1.HashMap集合底层是哈希表:查询的速度特别的快
                JDK1.8之前:数组+单向链表
                JDK1.8之后:数组+单向链表|红黑树(链表的长度超过8):提高查询的速度
            2.hashMap集合是一个无序的集合,存储元素和取出元素的顺序有可能不一致
    LinkedHashMapDemo<k,v>集合继承自HashMap<k,v>集合
        LinkedHashMap的特点:
            1.LinkedHashMap集合底层是哈希表+链表(保证迭代的顺序)
            2.LinkedHashMap集合是一个有序的集合,存储元素和取出元素的顺序是一致的

    增/改 - public V put(K key, V value):把指定的键与指定的值添加到Map集合中。
        返回值:v
            存储键值对的时候,key不重复,返回值V是null
            存储键值对的时候,key重复,会使用新的value替换map中重复的value,返回被替换的value值
    删   - public V remove(Object key): 把指定的键 所对应的键值对元素 在Map集合中删除，返回被删除元素的值。
            返回值:V
                key存在,v返回被删除的值
                key不存在,v返回null
    查   - public V get(Object key) 根据指定的键，在Map集合中获取对应的值。
            返回值:
                key存在,返回对应的value值
                key不存在,返回null

         - boolean containsKey(Object key) 判断集合中是否包含指定的键。
            包含返回true,不包含返回false

2.Map集合的遍历方法

    Map集合的第一种遍历方式:通过键找值的方式
        Map集合中的方法:
             Set<K> keySet() 返回此映射中包含的键的 Set 视图。
        实现步骤:
            1.使用Map集合中的方法keySet(),把Map集合所有的key取出来,存储到一个Set集合中
            2.遍历set集合,获取Map集合中的每一个key
            3.通过Map集合中的方法get(key),通过key找到value


    Map集合遍历的第二种方式:使用Entry对象遍历
        Map集合中的方法:
            Set<Map.Entry<K,V>> entrySet() 返回此映射中包含的映射关系的 Set 视图。
        实现步骤:
            1.使用Map集合中的方法entrySet(),把Map集合中多个Entry对象取出来,存储到一个Set集合中
            2.遍历Set集合,获取每一个Entry对象
            3.使用Entry对象中的方法getKey()和getValue()获取键与值

3.Map集合存储自定义类型对象最为键值时：
            作为key的元素,必须重写hashCode方法和equals方法,以保证key唯一

4.Hashtable<K,V>集合继承自Map<K,V>接口
    Hashtable:底层也是一个哈希表,是一个线程安全的集合,是单线程集合,速度慢
    HashMap:底层是一个哈希表,是一个线程不安全的集合,是多线程的集合,速度快

    HashMap集合(之前学的所有的集合):可以存储null值,null键
    Hashtable集合,不能存储null值,null键

    Hashtable和Vector集合一样,在jdk1.2版本之后被更先进的集合(HashMap,ArrayList)取代了

    Hashtable的子类Properties依然活跃在历史舞台
    Properties集合是一个唯一和IO流相结合的集合

5.interface的新特性：默认方法/静态方法/私有方法
    概念：
        是java中的一种规范，规范它的实现类应该有什么内容；

    接口中的内容：
        jdk1.8前:
            抽象方法；
            常量；

        jdk1.8新特性：
            1.默认方法：
                格式：
                    public default 返回值类型 方法名(参数列表){
                        //代码
                    }
                调用：
                    通过  对象名.默认方法名(参数);
                作用：
                    解决了接口升级的问题：
                        1.在接口中定义了默认方法，实现类中可以重写这个默认方法
                        2.也可以不重写这个默认方法，如果不重写的话，调用的是接口中的默认实现。

            2.静态方法：
                格式：
                    public static 返回值类型  方法名(参数列表){
                        //代码
                    }
                调用：
                    接口中的静态方法，通过实现类对象不能调用！
                    接口名.静态方法名(参数);
                作用：
                    接口中的静态方法属于接口，不能被实现类重写！
                    独立接口的使用，不再受实现类的束缚！

        jdk1.9新特性：

            3.私有方法：
                格式：
                    private [static] 返回值类型 方法名(参数列表){
                        //代码
                    }
                调用：
                    只能在接口内部调用
                作用：
                    在接口内进行代码的封装，提高代码的复用性，并且不把对应的方法暴露给外界

6.斗地主的HashMap实现