今日内容：
	Map集合：  增删改查
	斗地主：

01_Map集合概述
	Map集合中的键有什么要求？
		不能重复，唯一
	Map集合中键和值有什么关系？
		一一对应
	Map集合中值可不可以重复？
		可以
	*****************************
		Map集合中数据之间的关系是由键维护

02_Map常用子类
	HashMap的特点？
		底层：哈希表
		无序：存和取的顺序不一致
	LinkedHashMap的特点？
		底层： 哈希表+链表
		存取： 有序
	**************************************
		HashSet集合存储的元素是唯一的，底层是哈希表实现
		HashMap集合的键是唯一的，底层也是哈希表实现

		*HashSet就是用了HashMap的键

03_Map接口中的常用方法
	增？  put
	删？  remove
	查？  get
	改：  put
	如果通过put方法存放多个key相同，value不同的键值对，会发生什么？
		会替换掉已经存在的value

	判断集合中是否包含指定键？   containsKey()

04_Map集合遍历键找值方式
	如何获取Map中键的集合？   Set keySet();

05_Entry键值对对象
	如何获取Map键值对对象集合?    entrySet()
	如何获取一个Entry对象的键?    getKey
	如何获取一个Entry对象的值?    getValue

07_HashMap存储自定义类型键值

08_LinkedHashMap集合

09_Hashtable集合（了解）
	HashTable相比较HashMap有什么不同之处？
		HashTable不允许null值，而HashMap允许
		HashTable是线程安全的,效率低,而HashMap是线程不安全的,效率高

        HashTable中的一个子类 Properties依然活跃在历史的舞台

10_练习_计算一个字符串中每个字符出现次数
	aaccffddfaaddrreedd 房间里的酸辣粉附件代理商父类都是分开了独守空房
	int count;
	char[]

*********************扩展*************************
interface：
    概念：
        是java中的一种规范,规范它的实现类应该有什么内容

    接口中的内容：
        jdk1.8前:
            抽象方法
            常量

        jdk1.8新特性:
            默认方法
                格式：
                    public default 返回值类型 方法名(参数列表){
                        //代码
                    }
                调用：
                    通过  对象名.默认方法名(参数);
                作用：
                    解决了接口升级的问题
                    在接口中定义了默认方法,实现类中可以重写这个方法,也可以不重写这个方法,如果不重写的话，调用的是接口中的默认实现。

            静态方法；
                格式：
                    public static 返回值类型 方法名(参数列表){
                        //代码
                    }
                调用：
                    接口中的静态方法，通过实现类对象不能调用！
                    接口名.静态方法名(参数);
                作用：
                    接口中的静态方法属于接口，不能被实现类重写！
                    独立接口的使用，不再受实现类的束缚！

        jdk1.9新特性：
            私有方法：
                格式：
                    private [static] 返回值类型 方法名(参数列表){
                        //代码
                    }
                调用：
                    只能在接口内部调用
                作用：
                    在接口内进行代码的封装，提高代码的复用性，并且不把对应的方法暴露给外界

11_JDK9对集合添加的优化_of方法
	of方法的使用场景？
		明确集合的长度以及元素内容；
	of方法返回的集合，还能继续往里面添加元素吗？





13_斗地主案例的需求分析