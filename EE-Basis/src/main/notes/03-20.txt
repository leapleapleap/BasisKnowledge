今日内容：
	多线程程序执行原理(理解)
	多线程的开启(重点)
	多线程同步(线程安全)（重点）
	线程状态(理解)

02_多线程原理_随机性打印结果
	调用Thread对象的start方法，开启新线程后，主线程还能不能继续往下执行？

03_多线程原理_多线程内存图解
	每次调用start方法开启一个新的线程，内存发生了什么变化？
		会开辟一块新的栈空间，供新线程使用！

		每一个线程都有自己独立的栈空间！

		多个线程的执行是相互独立的，互不影响的！

04_Thread类的常用方法_获取线程名称的方法
	如何获取正在执行的线程对象？
		Thread.currentThread():谁执行我，我获取到的就是谁！！
	通过新线程对象，如何获取线程名称？
		getName()

05_Thread类的常用方法_设置线程名称的方法
	设置线程名称的两种方式？

06_Thread类的常用方法_sleep
	睡觉的是哪个线程？
		谁执行我，我睡谁！！

07_创建多线程程序的第二种方式_实现Runnable接口
	真正开启线程是通过谁来开启？
		由Thread对象的start方法
	实现Runnable类的过程，其实是在做什么？
		就是在设置线程任务

08_Thread和Runnable的区别
	实现Runnable接口的好处？
		1.避免了单继承的局限性！
		2.解耦------降低事物之间关系的亲密度
			耦合性；
			   两个事物的关系的亲密度

09_匿名内部类方式实现线程的创建

10_线程安全问题的概述
	线程安全问题产生的前提？
		1.多线程程序
		2.多线程程序共享同一个资源
		3.多个线程同时对共享的资源做增删改的操作

11_线程安全问题的代码实现
	共享资源是什么？
		private int ticket = 100;
	对共享资源的操作是什么？
		if(ticket>0){
			//提高安全问题出现的概率,让程序睡眠
			try {
				Thread.sleep(10);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			//票存在,卖票 ticket--
			System.out.println(Thread.currentThread().getName()+"-->正在卖第"+ticket+"张票");
			ticket--;
		}
	************************************
		成员变量会被多线程共享！
		局部变量不会被多线程共享！！

12_线程安全问题产生的原理
	线程安全问题产生的根本原因？
		cpu争抢！！！

13_解决线程安全问题_同步代码块
	同步代码块的格式？
	多个线程的锁对象有什么要求？
		1.锁对象可以是任意的对象；
		2.多个线程拿到的锁对象必须是同一个锁对象

14_同步技术的原理
	同步的优点和缺点？

15_解决线程安全问题_同步方法
	同步方法格式？
	同步方法的锁对象是谁？
		this

16_静态同步方法(了解)
	静态方法的锁对象是谁？
		当前类的字节码文件描述(Class)对象

	***************************
		同步机制：
			synchronized
				同步代码块
				同步方法
					静态方法：
					非静态方法：
			lock锁(理解)

17_解决线程安全问题_Lock锁
	Lock是接口还是类？
		接口：
		使用 ReentrantLock
	如何加锁？   ------lock
	如何释放锁？  ------unlock
	如果有异常产生，释放锁的动作应该放在哪里？   finally

18_线程状态概述(了解)
	6种状态？
		新建(NEW)             new Thread()

		可执行(RUNNABLE)
		    可以抢CPU --- .start()
			***可执行状态并不代表当前这个线程正在被CPU执行，而是只当前这个线程可以被CPU执行。
		阻塞(BLOCKED)
		    可以抢CPU---多线程同步中，抢锁没抢到

		限时等待(TIMED-WAITING)           Thread:
            不可以争抢CPU                	    sleep(long mills)
                                        Object:
                                        	wait(long mills)

		无限等待(WAITING)                 Object:
            不可以争抢CPU               		wait()

		死亡(TERMINATED)
			把任务执行完的线程，或者是意外终止的线程都处于这种状态！！

19_等待唤醒案例分析
	如何进入无限等待状态？
		Object      wait()
	如何把无限等待状态的线程唤醒？
		Object      notify()

20_等待唤醒案例代码实现
	调用wait方法和notify方法的代码书写的位置？

	******************
		跟线程同步相关的方法wait，notify这样的方法只能写在同步代码块中
			java.lang.IllegalMonitorStateException
		以上方法只能被锁对象调用；
			Exception in thread "main" java.lang.IllegalMonitorStateException