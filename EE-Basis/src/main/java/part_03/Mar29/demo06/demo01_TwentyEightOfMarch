1.网络编程
    TCP/IP协议
        应用层
        传输层
        ...
    BS/CS
    Java开发主要在浏览器服务器部分

2.TCP通信
    套接字：Socket
            客户机端直接创建Socket对象，在构造方法参数中传递服务器的IP地址（练习时使用的是本机地址127.0.0.1）、端口号
            服务器端使用ServerSocket类创建对象并且在构造方法参数中向系统指定端口号，再使用ServerSocket类中的accept()
        方法获取socket对象，此socket对象就是客户机端创建的socket对象，该对象中包含着客户机的IP地址以及其他的一些信息。这
        样客户机端和服务器端就都可以送socket对象获取网络输出流和网络输入流，从而进行信息的交互动作
            在交互过程中（下载、上传、验证、注册、等等等等）服务器端首先启动并且在合理的情况下需要一直处于监听状态，等待客
        户机端发送的各种请求，当客户机不唯一时，还需要服务器端能够同时处理多个客户机端的事务，这就需要客户机端能够多线程处理
        任务


    文件上传任务
        1.客户机端读取本地文件上传至服务器端
            在读取本地文件的同时写入网络输出流
            文件结尾的结束标志不会被写入到网络输出流
            需要调用socket对象中的shutdownOutput()----->Disables the output stream for this socket
        2.服务器端读取网络输入流并且将文件写出到硬盘中，并且发送“上传成功”的信息给客户机端
            创建ServerSocket对象并且绑定端口号
            调用accept方法获取socket对象
            创建本地输出流
            在读取网络输入流的同时写出到硬盘
            使用socket对象获取网络输出流对象，输出“上传成功”

    文件上传任务---改进版
        服务器端改进
            1.服务器端不应该只监听并执行一次后就关闭，而是需要一直处于监听状态，在正常情况下永不停机状态
                ---使用while(true)永真循环解决：当创建ServerSocket对象之后永真循环一直监听
            2.服务器端应该能同时处理多台客户机端的交互请求而非一次只能同一个客户机端进行交互
                ---使用多线程解决：创建线程对象并且传入runnable接口的实现类对象，该实现类对象的run方法中为同一类操作
            3.上传文件时需要避免同名文件的覆盖问题
                ---将文件名与随机数、系统时间等结合，降低文件重名的概率
            注意:runnable接口中的run方法没有抛出异常，则其实现类对象也不能抛出异常，只能try...catch
                每次现成执行结束后还需关闭本地写出流和网络输入流，而SocketSever对象不需要关闭

            ~~~使用线程池技术如何实现上述功能？

    B/S版~~TCP服务器
        创建ServerSocket对象并且指定端口
        使用accept方法接收socket对象
        接收网页发送来的连接请求
            （输出后的第一行是GET /JavaEE_basis/src/_0328_stu_coding_on_net/web/index.html HTTP/1.1）
        将网络字节输入流通过转换流（InputStreamReader）转换为字符输入流在包装为BufferedReader流

        使用BufferedReader类的readLine方法读取第一行
        使用String类的split()、substring()方法获取browser想要访问的html文件路径
            （JavaEE_basis/src/_0328_stu_coding_on_net/web/index.html）

        创建本地文件字节输入流、使用socket对象获取网络输出流，读取.html文件的同时写出到网络输出流
        ~~~~~~在将.html文件写入网络输出流之前需要写入【HTTP协议响应头、空行】~~~~~~

    文件下载任务~~~简化版~自练

        Debug的能力和技巧
            在每个阶段代码前后输出字符串，检测发生问题的代码具体位于哪块，缩小问题查找范围


    Tomcat Web服务器 端口：8080