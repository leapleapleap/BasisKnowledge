1.泛型（generic）
    泛型类     --->    修饰符 class 类名<E>{}
    泛型方法    --->    修饰符 (static) <M> 返回值类型 方法名(M m){方法体}
    泛型接口    --->    修饰符 interface 接口名 <E>{抽象方法,(默认方法、静态方法、私有方法)}
        泛型接口的实现方法
            1.在实现类中直接指定实际类型
            2.在实现类中继续使用泛型，待构造对象时传入参数类型确定实际类型

2.Collection接口
        所有单列集合的最顶层的接口,里边定义了所有单列集合共性的方法
        任意的单列集合都可以使用Collection接口中的方法

        Collection中的方法：
            add(E e)        --->把给定的对象添加到当前集合中
            remove(E e)     --->把给定的对象在当前集合中删除
            contains(E e)   --->判断当前集合中是否包含给定的对象
            isEmpty()       --->判断当前集合是否为空
            clear()         --->清空集合中所有的元素
 int        size()          --->返回集合中元素的个数
 Object[]   toArray()       --->将集合中的元素存储到数组中

        多态的弊端：
            不能访问子类中特有的成员，包括成员变量和成员方法

3.迭代器(Iterator)
    java.util.Iterator接口:迭代器(对集合进行遍历)
    常用方法：
        boolean hasNext()
        E next()
    Iterator迭代器的获取
        通过Collection接口中的iterator()方法获得迭代器的实现类对象
    迭代器的使用步骤：
        1.获取迭代器的实现类对象
            Iterator<E> it = (Collection的实现类对象).iterator();
        2.判断还有没有下一个元素
            while(it.hasNext()){}
        3.使用Iterator接口中的方法next取出集合中的下一个元素
            E e = it.next();

    ListIterator接口
        继承自Iterator,允许程序员沿任一方向遍历列表的列表的迭代器，在迭代期间修改列表，并获取列表中迭代器的当前位置

4.斗地主案例
    锻炼将问题由大化小的能力