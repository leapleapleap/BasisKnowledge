今日内容：
	集合的流式操作(Stream)掌握

	方法引用（了解）

02_使用传统的方式,遍历集合,对集合中的数据进行过滤

03_使用Stream流的方式,遍历集合,对集合中的数据进行过滤

04_流式思想概述
	Stream流会不会存储真正的数据？
		不会，只操作数据
	Stream流的数据来源？
		数组，集合等等

05_两种获取Stream流的方式
	Collection:
		stream()

	Stream:
		of()

06_Stream流中的常用方法_forEach
	什么是延迟方法？
		方法的返回值类型  还是Stream
		每一次返回的都是新的Stream对象。
	什么是终结方法？
		方法的返回值类型  不是Stream

07_Stream流中的常用方法_filter
	filter方法的返回值类型？
		Stream

08_Stream流的特点_只能使用一次

09_Stream流中的常用方法_map
	map方法的返回值类型？

10_Stream流中的常用方法_count

	int count():用来计算当前的流对象可以操作的数据的数目；
	Stream limit(long n); 截取当前流可操作数据的前几个
	Stream skip(long n); 跳过当前流可操作数据的前几个

	Stream：
	  static Stream concat(Stream stream1,Stream stream2):
		把stream1中可以操作的数据和stream2中可以操作的数据合并起来,生成一个新的流,可以操作所有的数据

	***********************
		延迟方法：
			filter
			map
			limit
			skip

		终结方法：
			forEach
			count
			collect
	****************************
		如果把流对象可操作的数据收集到集合中
			收集到Set集合中：
				Set collect(Collectors.toSet())

			收集到List集合中：
				List collect(Collectors.toList())
		如果把流对象可操作的数据收集到数组中；
			先把数据收集到集合中，再把集合转换成数组

16_方法引用基本介绍
	:: 是什么？
		引用运算符
	什么是方法引用？
		把已经存在的方法，拿过来用一用！！！
	什么时候用方法引用？
		Lambda表达式的作用？
			替换函数式接口的实现类对象；

		方法引用：
			当写一个Lambda表达式，需要完成一个功能，而这个功能恰巧被一个已经存在的方法完成了，
			可以直接把这个方法引用过来，替换Lambda表达式。

17_方法引用_通过对象名引用成员方法
	引用成员方法的格式？
		对象 :: 成员方法名

18_方法引用_通过类名引用静态成员方法
	格式：
		类名 :: 静态方法名

19_方法引用_通过super引用父类的成员方法
	super :: 父类成员方法

20_方法引用_通过this引用本类的成员方法
	this :: 本类成员方法


21_方法引用_类的构造器(构造方法)引用
	格式？
		构造方法名 :: new

		new 构造方法名();
22_方法引用_数组的构造器引用
		new Student[];
	格式：
		数据类型[] :: new;